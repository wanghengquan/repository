-- VHDL testbench template generated by SCUBA Diamond (64-bit) 3.5.0.98
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_unsigned.all;

use IEEE.math_real.all;

use IEEE.numeric_std.all;

entity tb is
end entity tb;


architecture test of tb is 

    component maddsub_10x17_dynamic_vlog
        port (CLK0: in std_logic; CE0: in std_logic; RST0: in std_logic; 
        SignA: in std_logic; SignB: in std_logic; ADDNSUB: in std_logic; 
        A0 : in std_logic_vector(9 downto 0); 
        A1 : in std_logic_vector(9 downto 0); 
        B0 : in std_logic_vector(16 downto 0); 
        B1 : in std_logic_vector(16 downto 0); 
        SUM : out std_logic_vector(27 downto 0)
    );
    end component;

    signal CLK0: std_logic := '0';
    signal CE0: std_logic := '0';
    signal RST0: std_logic := '0';
    signal SignA: std_logic := '0';
    signal SignB: std_logic := '0';
    signal ADDNSUB: std_logic := '0';
    signal A0 : std_logic_vector(9 downto 0) := (others => '0');
    signal A1 : std_logic_vector(9 downto 0) := (others => '0');
    signal B0 : std_logic_vector(16 downto 0) := (others => '0');
    signal B1 : std_logic_vector(16 downto 0) := (others => '0');
    signal SUM : std_logic_vector(27 downto 0);
begin
    u1 : maddsub_10x17_dynamic_vlog
        port map (CLK0 => CLK0, CE0 => CE0, RST0 => RST0, SignA => SignA, 
            SignB => SignB, ADDNSUB => ADDNSUB, A0 => A0, A1 => A1, B0 => B0, 
            B1 => B1, SUM => SUM
        );

    CLK0 <= not CLK0 after 5.00 ns;

    process

    begin
      CE0 <= '1' ;
      wait;
    end process;

    process

    begin
      RST0 <= '1' ;
      wait for 100 ns;
      RST0 <= '0' ;
      wait;
    end process;

    process

    begin
      A0 <= (others => '0') ;
      for i in 0 to 200 loop
        wait for 10 ns;
        A0 <= A0 + '1' ;
      end loop;
      wait;
    end process;

    process

    begin
      A1 <= (others => '0') ;
      for i in 0 to 200 loop
        wait for 10 ns;
        A1 <= A1 + '1' ;
      end loop;
      wait;
    end process;

    process

    begin
      B0 <= (others => '0') ;
      for i in 0 to 200 loop
        wait for 10 ns;
        B0 <= B0 + '1' ;
      end loop;
      wait;
    end process;

    process

    begin
      B1 <= (others => '0') ;
      for i in 0 to 200 loop
        wait for 10 ns;
        B1 <= B1 + '1' ;
      end loop;
      wait;
    end process;

end architecture test;
